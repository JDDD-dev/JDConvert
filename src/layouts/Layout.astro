---
import Header from "@/components/Header.astro"
import Footer from "@/components/Footer.astro"
import "@/styles/globals.css"

interface Props {
	title: string
}

const { title } = Astro.props
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Convert anything you need!" />
		<meta name="keywords" content="convert, transform"/>
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
		<div class="relative h-full w-full bg-slate-950">
			<div
				class="absolute bottom-0 left-0 right-0 top-0 bg-[linear-gradient(to_right,#4f4f4f2e_1px,transparent_1px),linear-gradient(to_bottom,#4f4f4f2e_1px,transparent_1px)] bg-[size:14px_24px] [mask-image:radial-gradient(ellipse_60%_50%_at_50%_0%,#000_70%,transparent_100%)]"
			>
			</div>
		</div>
		<Header />
		<slot />
		<Footer />
	</body>
</html>

<style is:global>
	body {
		height: 100vh;
		display: flex;
	}
</style>

<script is:inline>
	const getThemePreference = () => {
		if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
			return localStorage.getItem("theme")
		}
		return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light"
	}
	const isDark = getThemePreference() === "dark"
	document.documentElement.classList[isDark ? "add" : "remove"]("dark")

	if (typeof localStorage !== "undefined") {
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains("dark")
			localStorage.setItem("theme", isDark ? "dark" : "light")
		})
		observer.observe(document.documentElement, { attributes: true, attributeFilter: ["class"] })
	}
</script>
